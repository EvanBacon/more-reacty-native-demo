diff --git a/node_modules/react-native/Libraries/Renderer/implementations/ReactNativeRenderer-dev.js b/node_modules/react-native/Libraries/Renderer/implementations/ReactNativeRenderer-dev.js
index d993f42..736571d 100644
--- a/node_modules/react-native/Libraries/Renderer/implementations/ReactNativeRenderer-dev.js
+++ b/node_modules/react-native/Libraries/Renderer/implementations/ReactNativeRenderer-dev.js
@@ -5586,6 +5586,9 @@ to return true:wantsResponderID|                            |
     function getChildHostContext(parentHostContext, type) {
       var prevIsInAParentText = parentHostContext.isInAParentText;
       var isInAParentText =
+        // Patch to support custom native view
+        type === 'p' ||
+        // Others...
         type === "AndroidTextInput" || // Android
         type === "RCTMultilineTextInputView" || // iOS
         type === "RCTSinglelineTextInputView" || // iOS
@@ -28551,3 +28554,4 @@ to return true:wantsResponderID|                            |
     }
   })();
 }
+
diff --git a/node_modules/react-native/Libraries/Renderer/shims/ReactNativeViewConfigRegistry.js b/node_modules/react-native/Libraries/Renderer/shims/ReactNativeViewConfigRegistry.js
index cbcdfce..9abda4b 100644
--- a/node_modules/react-native/Libraries/Renderer/shims/ReactNativeViewConfigRegistry.js
+++ b/node_modules/react-native/Libraries/Renderer/shims/ReactNativeViewConfigRegistry.js
@@ -1,3 +1,4 @@
+
 /**
  * Copyright (c) Meta Platforms, Inc. and affiliates.
  *
@@ -96,18 +97,42 @@ export function register(name: string, callback: () => ViewConfig): string {
 export function get(name: string): ViewConfig {
   let viewConfig;
   if (!viewConfigs.has(name)) {
-    const callback = viewConfigCallbacks.get(name);
+    let callback = viewConfigCallbacks.get(name);
     if (typeof callback !== 'function') {
-      invariant(
-        false,
-        'View config getter callback for component `%s` must be a function (received `%s`).%s',
-        name,
-        callback === null ? 'null' : typeof callback,
-        // $FlowFixMe[recursive-definition]
-        typeof name[0] === 'string' && /[a-z]/.test(name[0])
-          ? ' Make sure to start component names with a capital letter.'
-          : '',
-      );
+      
+      if (typeof name[0] === 'string' && /[a-z]/.test(name[0])) {
+        // Just-in-time register the native view for lowercase names to replicate the behavior of 
+        // react-dom.
+        const createReactNativeComponentClass = require('./createReactNativeComponentClass');
+        const getNativeComponentAttributes = require('../../ReactNative/getNativeComponentAttributes');
+  
+        createReactNativeComponentClass(name, () =>
+          getNativeComponentAttributes(name)
+        );
+        callback = viewConfigCallbacks.get(name);
+        if (typeof callback !== 'function') {
+          // throw new Error('View config getter callback missing for component ' + name);
+          invariant(
+            false,
+            'View config getter callback for component `%s` must be a function (received `%s`).%s',
+          );
+        }
+      }
+
+      if (typeof callback !== 'function') {
+        // throw new Error('View config getter callback missing for component ' + name);
+        invariant(
+          false,
+          'View config getter callback for component `%s` must be a function (received `%s`).%s',
+          name,
+          callback === null ? 'null' : typeof callback,
+          // $FlowFixMe[recursive-definition]
+          typeof name[0] === 'string' && /[a-z]/.test(name[0])
+            ? ' Make sure to start component names with a capital letter.'
+            : '',
+        );
+      }
+      
     }
     viewConfig = callback();
     processEventTypes(viewConfig);
